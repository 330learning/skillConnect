{"version":3,"sources":["Components/Header.js","Login/Login.js","Login/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","Component","Login","className","TextField_default","label","type","margin","autoComplete","Button_default","variant","color","NavLink","to","style","textDecoration","Signup","selectorStyle","control","base","Object","objectSpread","fontSize","menu","react_select_esm","options","value","isMulti","styles","App","BrowserRouter","basement","process","src_Components_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60c51c35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component{\n    render() {\n        return (\n            <div id=\"header\">\n            <p id=\"title\">skillConnect</p>\n          </div>\n        )\n    }\n}\nexport default Header","import React, { Component } from 'react';\nimport './Login.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {NavLink} from \"react-router-dom\";\n\n\nclass Login extends Component {\n  render() {\n    return (\n      <div className=\"Login\">\n        <header className=\"Login-header\">\n        <p> SIGN IN</p>\n          <TextField\n            className = \"Standard-input\"\n            label=\"Username:\"\n            type=\"search\"\n            margin=\"normal\"\n          />\n          <div className=\"Password\">\n          <TextField\n            className = \"Standard-input\"\n            label=\"Password:\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            margin=\"normal\"\n          />\n          {/* <p>Forgot Password</p> */}\n          </div>\n\n          <Button variant=\"contained\" color=\"primary\" id=\"sign-in\">\n            Sign in\n          </Button>\n          <div id=\"sign-up-div\">\n            <p id=\"sign-up-p\">Don't have an account?</p>\n            </div>\n            <div>\n            <NavLink to=\"/Signup\" style={{textDecoration:'none'}} >\n            <Button variant=\"contained\" color=\"secondary\" id=\"sign-up\">\n              Sign up\n            </Button>\n            </NavLink>\n\n          </div>\n        </header>\n\n      </div>\n\n);\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport './Signup.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {NavLink} from \"react-router-dom\";\nimport  Select from 'react-select';\n\n\nclass Signup extends Component {\n\n    render() {\n        //options and styles for the selector\n        var options = [\n            {value: 'Arts', label:'Arts'},\n            {value: 'Chem', label: 'Chemistry'},\n            {value: 'Computer', label: 'Computer'},\n            {value: 'History', label: 'History'},\n            {value: 'Math', label: 'Math'},\n            {value: 'Others', label:'Others'}\n        ]\n\n        var selectorStyle = {\n            control: base => ({\n                ...base,\n                fontSize:\"18px\"\n            }),\n            menu: base => ({\n                ...base,\n                fontSize:\"14px\"\n            })\n        }\n\n        return(\n        <header className=\"Signup-header\">\n        \n        <p> SIGN UP</p>\n          <TextField\n            className = \"Standard-input\"\n            label=\"Username:\"\n            type=\"search\"\n            margin=\"normal\"\n          />\n          <TextField\n            className = \"Standard-input\"\n            label=\"Password:\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            margin=\"normal\"\n          />\n          <TextField\n            className = \"Standard-input\"\n            label=\"Confirm Password:\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            margin=\"normal\"\n          />\n\n        <p id=\"type-of-user\">Field of Interests</p>\n        <Select className = \"Selector\" options = {options} isMulti styles={selectorStyle}/>\n        \n        <NavLink to=\"/\" style={{textDecoration:'none'}} >\n          <Button variant=\"contained\" color=\"primary\" id=\"sign-in\">\n            FINISH\n          </Button>\n          </NavLink>\n\n            <NavLink to=\"/\" style={{textDecoration:'none'}} >\n            <Button variant=\"contained\" color=\"secondary\" id=\"sign-up\">\n              CANCEL\n            </Button>\n            </NavLink>\n\n        </header>\n\n        );\n    }\n\n}\n\nexport default Signup;","import React, { Component } from 'react';\nimport Header from './Components/Header';\nimport Login from './Login/Login';\nimport {Switch, Route, BrowserRouter} from 'react-router-dom';\nimport Signup from './Login/Signup';\n\nclass App extends Component{\n    render() {\n        return (\n            <BrowserRouter basement={process.env.PUBLIC_URL}>\n            <div>\n                <Header/>\n                <Switch>\n                    <Route exact path ='/' component={Login}/>\n                    <Route path = '/Signup' component={Signup}/>\n                </Switch>\n\n            </div>\n            </BrowserRouter>\n        \n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}